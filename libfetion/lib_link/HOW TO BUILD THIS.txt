libcurl
========================================================
src: curl-7.19.5
下载下来后文件夹内有vc6的工程
直接build就ok了
=======================================================
libxml
========================================================================
libxml2采用的是命令行的编译方式，没有用VC工程的方式。下面简要说明。
下载最新的libxml2：ftp://xmlsoft.org/libxml2/
libxml2-sources-2.7.6
2 解压打开cmd cd进入目录：
E:\libxml2-sources-2.7.6\libxml2-2.7.6\win32
3 然后运行cscript：
cscript configure.js iconv=no zlib=no static=yes cruntime=/MD prefix=.\Release
下图


4 修改testapi.c 。..\testapi.c(295)，有个错误'?是个奇怪字符，修改下变为'?'。
static xmlChar gen_xmlChar(int no, int nr ATTRIBUTE_UNUSED) {
    if (no == 0) return('a');
    if (no == 1) return(' ');
    if (no == 2) return((xmlChar) '?');
    return(0);
}
5键入nmake clean all就会生成对应的库（bin.msvc目录里）
6 nmake install
=========================================================================
openssl
=========================================================================
src:openssl-0.9.8
1.安装perl,perl可以从http://www.activestate.com/ActivePerl下载。

2.安装编译器（任意一个都可以）,我仅以Visual C++为例子。

    Visual C++
    Borland C
    GNU C (Cygwin or MinGW)

3.如果通过汇编的方式编译，需要安装汇编语言编译器。MASM NASM都可以。如果速度要求不高，可以不用汇编的方式编译，即不需要安装。MASM一般由VC++自带，Windows NT 4.0 DDK a和Windows 98 DDK也带有MASM。把XXXXXml.exe和XXXXXml.err文件，提取出来，命名为ml.exe和ml.err，并把他们放到PATH路径中即可。

NASM可以免费获取，很多地方都可以下载到，如http://www.kernel.org/pub/software/devel/nasm/binaries/win32/

nasmw.exe文件也需要放到PATH路径中。

4.打开一个DOS窗口，输入：
(1)如果编译static库:	
perl Configure VC-WIN32 no-shared
(2) 如果编译shared库:
perl Configure VC-WIN32 no-shared

5.如果使用MASM，接着输入：ms\do_masm

 如果使用NASM，接着输入：ms\do_nasm

如果不使用汇编语言编译器，(推荐使用) 输入:ms\do_ms

6.在DOS窗口中接着输入：nmake -f ms\ntdll.mak

如果没有错误的话，编译就通过了，在out32dll目录下面就可以看到，生成的dll文件和可执行文件了。把他们放到，PATH环境变量对应的一个目录里就可以了。
===================================================================================================
pthread
=================================================================
下载源码:忘了网址了.网上找找
Building the library as a statically linkable library
-----------------------------------------------------

General: PTW32_STATIC_LIB must be defined for both the library build and the
application build. The makefiles supplied and used by the following 'make'
command lines will define this for you.

MSVC (creates pthreadVCn.lib as a static link lib):

nmake clean VC-static


MinGW32 (creates libpthreadGCn.a as a static link lib):

make clean GC-static


Define PTW32_STATIC_LIB when building your application. Also, your
application must call a two non-portable routines to initialise the
some state on startup and cleanup before exit. One other routine needs
to be called to cleanup after any Win32 threads have called POSIX API
routines. See README.NONPORTABLE or the html reference manual pages for
details on these routines:

BOOL pthread_win32_process_attach_np (void);
BOOL pthread_win32_process_detach_np (void);
BOOL pthread_win32_thread_attach_np (void); // Currently a no-op
BOOL pthread_win32_thread_detach_np (void);


The tests makefiles have the same targets but only check that the
static library is statically linkable. They don't run the full
testsuite. To run the full testsuite, build the dlls and run the
dll test targets.
=====================================================================